---
title: "STATS506-HW5-JunjieZeng"
format: 
  html:
    embed-resources: true
editor: visual
---


## Repository

https://github.com/JunjieZeng1/STATS-506.git

## Problem 1

### a
 
```{r}
library(Rcpp)
```

```{r}
#' @title Rational Number Class
#' @slot numerator An integer representing the numerator.
#' @slot denominator An integer representing the denominator (non-zero)
rational <- setClass("rational", 
                     slots = c(numerator = "numeric",
                               denominator = "numeric"))



#' @title Create a Rational Object
#' @param Numerator An integer for the numerator.
#' @param Denominator An integer for the denominator. Need to be non-zero.
#' @return An object of the class `rational`.
newRational <- function(Numerator, Denominator){
  return(new("rational", numerator = Numerator, denominator = Denominator))
}



#' @title Validator of the class `rational`
#' @param object An object of the class `rational`
setValidity("rational", function(object){
  if(!(is.numeric(object@numerator) && object@numerator == floor(object@numerator))){
    stop(paste("@numerator", object@numerator, "should be integers"))
  }
  
  if(!(is.numeric(object@denominator) && object@denominator == floor(object@denominator))){
    stop(paste("@denominator", object@denominator, "should be integers"))
  }
  
  if(object@denominator == 0){
    stop(paste("@denominator = ", object@denominator, "should not be zero"))
  }
})



#' @title Display Rational Numbers
#' @description A method to display a rational object in "numerator/denominator" form.
#' @param object An object of class `rational`.
setMethod("show", "rational", function(object){
  if(object@numerator == 0){
    print(0)
  }
  else if(object@denominator == 1){
    print(object@numerator)
  }
  else if(object@numerator %% object@denominator == 0){
    print(object@numerator / object@denominator)
  }
  else{
    cat(object@numerator, "/", object@denominator, "\n", sep = "")
  }
})



#' @title Get the GCD of two numbers. 
#' @param x An integer.
#' @param y An integer.
#' @return An integer, the gcd of `x` and `y`.
cppFunction("
int getGcd(int x, int y) {
 return  std::gcd(x, y);
}")



#' @title Get the LCM of two numbers. 
#' @param x An integer.
#' @param y An integer.
#' @return An integer, the lcm of `x` and `y`.
cppFunction("
int getLcm(int x, int y) {
 return  std::lcm(x, y);
}")



#' @title Generic function for simplify method
#' @param object An object of the class `rational`. 
#' @return An object of the class `rational`.
setGeneric("simplify", function(object) {
  standardGeneric("simplify")
})



#' @title Get the simplified form of an object of the `rational` class
#' @param object An object of the class `rational`. 
#' @return An object of the class `rational`.
setMethod("simplify", "rational", function(object){
  gcd <- getGcd(object@numerator, object@denominator)
  return(newRational(object@numerator / gcd, object@denominator / gcd))
})



#' @title Generic function for quotient method
#' @param object An object of the class `rational`. 
#' @param digits An integer shows number of digits want to display. Default NULL.
#' @return An object of the class `rational`.
setGeneric("quotient", function(object, digits=NULL) {
  standardGeneric("quotient")
})



#' @title Calculate the Quotient of a Rational Object
#' @param object An object of the class `rational`. 
#' @param digits An integer shows number of digits want to display. Default NULL.
#' @return An object of the class `rational`.
setMethod("quotient", "rational", function(object, digits=NULL){
  if (is.null(digits)){
    return(object@numerator / object@denominator)
  }
  if (!(is.numeric(digits) && digits %% 1 == 0)){
    stop(paste("digits should be an integer"))
  }
  return(round(object@numerator / object@denominator, digits))
})



#' @title Addition of Two Rational Objects
#' @param e1 An object of class `rational`.
#' @param e2 An object of class `rational`.
#' @return A object of class `rational` representing the sum of `e1` and `e2`.
getMethod("+")
setMethod("+", signature(e1 = "rational",
                         e2 = "rational"),
  function(e1, e2) {
    r1 <- newRational(e1@numerator * e2@denominator + e2@numerator * e1@denominator, e1@denominator * e2@denominator)
    return(simplify(r1))
  })



#' @title Subtraction of Two Rational Objects
#' @param e1 An object of class `rational`.
#' @param e2 An object of class `rational`.
#' @return A object of class `rational` representing the difference of `e1` and `e2`.
getMethod("-")
setMethod("-", signature(e1 = "rational",
                         e2 = "rational"),
  function(e1, e2) {
    r1 <- newRational(e1@numerator * e2@denominator - e2@numerator * e1@denominator, e1@denominator * e2@denominator)
    return(simplify(r1))
  })



#' @title Multiplication of Two Rational Objects
#' @param e1 An object of class `rational`.
#' @param e2 An object of class `rational`.
#' @return A object of class `rational` representing the product of `e1` and `e2`.
getMethod("*")
setMethod("*", signature(e1 = "rational",
                         e2 = "rational"),
  function(e1, e2) {
    r1 <- newRational(e1@numerator * e2@numerator, e1@denominator * e2@denominator)
    return(simplify(r1))
  })



#' @title Division of Two Rational Objects
#' @param e1 An object of class `rational`.
#' @param e2 An object of class `rational`.
#' @return A object of class `rational` representing the quotient of `e1` and `e2`.
getMethod("/")
setMethod("/", signature(e1 = "rational",
                         e2 = "rational"),
  function(e1, e2) {
    r1 <- newRational(e1@numerator * e2@denominator, e1@denominator * e2@numerator)
    return(simplify(r1))
  })
```

### b

```{r}
r1 <- newRational(24, 6)
r2 <- newRational(7, 230)
r3 <- newRational(0, 4)
```

```{r, error=TRUE}
r1
r3
r1 + r2
r1 - r2
r1 * r2
r1 / r2
r1 + r3
r1 * r3
r2 / r3
quotient(r1)
quotient(r2)
quotient(r2, digits = 3)
quotient(r2, digits = 3.14)
quotient(r2, digits = "avocado")
q2 <- quotient(r2, digits = 3)
q2
quotient(r3)
simplify(r1)
simplify(r2)
simplify(r3)
```

### c
```{r, error=TRUE}
# Check for denominator 0
newRational(1,0)

# Check for numerator non-integer
newRational(1.1, 2)


# Check for denominator non-integer
newRational(1, 2.1)

# Check for integer-like floats
newRational(1.0, 2.0)

# Check for non-numeric
newRational("a", 2)
newRational(2, "a")
newRational("tree", "apple")
```


## Problem 2
### a
```{r}
library(plotly)
library(dplyr)
```
```{r}
# Load data
art <- read.csv("/Users/junjiezeng/Desktop/git/STATS506/HW4/df_for_ml_improved_new_market.csv")
```
```{r}
g <- art |> 
  mutate(Genre = case_when(
    Genre___Print == 1 ~ "Print", 
    Genre___Photography == 1 ~ "Photography", 
    Genre___Painting == 1 ~ "Painting",
    Genre___Sculpture == 1 ~ "Sculpture",
    Genre___Others == 1 ~ "Others"
  )) |> 
  group_by(year, Genre) |> 
  summarize(total_sales = sum(price_usd)) |> 
  ggplot(aes(x = year, y= total_sales, fill = Genre)) +
  geom_bar(stat = "identity", position = "fill") +
  labs(title = "Average Sales Price Over Time",
       x = "Year", 
       y = "Average Sales Price (USD)") +
  scale_x_continuous(breaks = seq(min(art$year), max(art$year), by = 2)) +
  theme_minimal()
ggplotly(g)
```

### b
```{r}
by_genre <- art |>
  mutate(Genre = case_when(
    Genre___Print == 1 ~ "Print",
    Genre___Photography == 1 ~ "Photography",
    Genre___Painting == 1 ~ "Painting",
    Genre___Sculpture == 1 ~ "Sculpture",
    Genre___Others == 1 ~ "Others"
  )) |>
  group_by(year, Genre) |>
  summarize(mean_price = mean(price_usd)) |> 
  ungroup() |> 
  mutate(Type = Genre)

general <- art |> 
  select(year, price_usd) |> 
  group_by(year) |> 
  summarize(mean_price = mean(price_usd)) |> 
  mutate(Type = "All")

new_art <- bind_rows(by_genre, general)
```

```{r}
p <- plot_ly(
  new_art, 
  x = ~year, 
  y = ~mean_price, 
  color = ~Type, 
  type = 'scatter', 
  mode = 'lines+markers'
)

p <- p |> 
  layout(
    title = "Average Sales Price Over Time",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Average Sales Price (USD)")
  )
p
```

## Problem 3
### a
```{r}
library(data.table)
library(nycflights13)
```
```{r}
flights <- data.table(flights)
flights[, .(mean_dep_delay = mean(dep_delay, na.rm = TRUE), 
            median_dep_delay = median(dep_delay, na.rm = TRUE)),
        by= origin][order(-mean_dep_delay)] 
```

```{r}
flights[, .(mean_arr_delay = mean(arr_delay, na.rm = TRUE),
            median_arr_delay = median(arr_delay, na.rm = TRUE),
            num_flights = .N), 
        by = dest][num_flights >= 10][order(-mean_arr_delay), .(dest, mean_arr_delay, median_arr_delay)]
```

### b
```{r}
planes <- data.table(planes)

flights[planes, on = "tailnum"][, .(speed_flights = distance / (air_time / 60), model)][, .(avg_speed = mean(speed_flights, na.rm = TRUE), total_flights = .N), by = model][order(-avg_speed)][1]
```
