---
title: "STATS506-HW1-JunjieZeng"
author: "Junjie Zeng"
format: html
editor: visual
---

# STATS506 Problem Set #1
## Repository
https://github.com/JunjieZeng1/STATS-506.git       


## Problem 1 - Wine Data

### 1.a

```{r}
# Loading data
dfwine <- read.table("/Users/junjiezeng/Desktop/wine/wine.data", sep = ",")
```

```{r}
# Change column names
names(dfwine) <- c("class", "Alcohol", "Malicacid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols", "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins","Color_intensity", "Hue", "OD280_OD315_of_diluted_wines", "Proline")
head(dfwine)
```

### 1.b

The number of wines within each class indeed matches the numbers reported in "wine.names", which are 59, 71, and 48 respectively.

```{r}
# Create new dataframes for different classes
dfwine1 <- dfwine[dfwine$class == 1, ]
dfwine2 <- dfwine[dfwine$class == 2, ]
dfwine3 <- dfwine[dfwine$class == 3, ]
```

```{r}
# Check the number of wines within each class
nrow(dfwine1)
nrow(dfwine2)
nrow(dfwine3)
```

### 1.c

#### 1.c.1

The correlation between alcohol content and color intensity is `cor(dfwine$Alcohol, dfwine$Color_intensity)`

```{r}
# Compute the correlation of alcohol vs color intensity
cor(dfwine$Alcohol, dfwine$Color_intensity)
```

#### 1.c.2

Class 1 has the highest correlation, which is 0.4082913. Class 2 has the lowest correlation, which is 0.2697891.

```{r}
# Compute correlation above for different classes
cor1 <- cor(dfwine1$Alcohol, dfwine1$Color_intensity)
cor2 <- cor(dfwine2$Alcohol, dfwine2$Color_intensity)
cor3 <- cor(dfwine3$Alcohol, dfwine3$Color_intensity)
cor1
cor2
cor3
```

```{r}
# Find the highest and lowest correlation
cors <- c(cor1, cor2, cor3)
max(cors)
min(cors)
```

#### 1.c.3

The alcohol content of the wine with the highest color intensity is 14.34.

```{r}
dfwine[dfwine$Color_intensity == max(dfwine$Color_intensity),]$Alcohol
```

#### 1.c.4
About 8.43 percent of wines had a higher content of proanthocyanins compare to ash. 
```{r}
# Computing percentage
nrow(dfwine[dfwine$Proanthocyanins - dfwine$Ash > 0,]) / nrow(dfwine)
```


### 1.d
```{r}
# Compute averages
mean_var <- rep(NA, 13)
mean_var1 <- rep(NA, 13)
mean_var2 <- rep(NA, 13)
mean_var3 <- rep(NA, 13)

for (i in 2:ncol(dfwine)){
  mean_var[i - 1] = mean(dfwine[, i])
  mean_var1[i - 1] = mean(dfwine[dfwine$class == 1, i])
  mean_var2[i - 1] = mean(dfwine[dfwine$class == 2, i])
  mean_var3[i - 1] = mean(dfwine[dfwine$class == 3, i])
}

mean_var
mean_var1
mean_var2
mean_var3
```

```{r}
# Create a table
df_mean <- t(data.frame(overall_mean = mean_var,
                    class1_mean = mean_var1,
                    class2_mean = mean_var2,
                    class3_mean = mean_var3))
table_mean <- as.table(df_mean)
colnames(table_mean) <- colnames(dfwine[,-1])
```
```{r}
table_mean
```

### 1.e
Both t-test result rejected the null hypothesis with very small p-values, suggesting the level of phenols differs across the three classes. 
```{r}
t.test(dfwine1$Total_phenols, dfwine2$Total_phenols)
t.test(dfwine2$Total_phenols, dfwine3$Total_phenols)
```

## Problem 2
### 2.a
```{r}
# Import data
dfmanager <- read.table("AskAManager.csv", sep = ",", header = TRUE)
```

### 2.b
```{r}
# Set column names
colnames(dfmanager) <- c("Number", "Timestamp", "Age", "Industry", "Position", "Position_supplement", "Salary", "Additional_compensation", "Currency", "Other_currency", "Income_supplement", "Country", "State", "City", "Overall_work_years", "Field_work_years", "Level_of_education", "Gender", "Race")
```

### 2.c
We see a tremendous decrease in our observations. And the amount matches with those not "USD". So we succeeded to restrict the data to those being paid in US dollars. 
```{r}
# Filter out those being paid in US dollars (USD)
nrow(dfmanager)
nrow(dfmanager[!(dfmanager$Currency == "USD"), ])
dfmanager <- dfmanager[dfmanager$Currency == "USD", ]
nrow(dfmanager)
```

### 2.d
```{r}
# Eliminate rows with age "under 18"
nrow(dfmanager[dfmanager$Age == "under 18", ])
dfmanager <- dfmanager[!(dfmanager$Age == "under 18"), ]
nrow(dfmanager)
```
```{r}
# Find and compare categories in Overall_work_years and Field_work_years
unique(dfmanager$Overall_work_years)
unique(dfmanager$Field_work_years)
```

```{r}
# Factor both of the variables for further use, set levels
dfmanager$Field_work_years <- factor(dfmanager$Field_work_years, 
                        levels = c("1 year or less", "2 - 4 years", "5-7 years", "8 - 10 years", "11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more"), 
                        ordered = TRUE)
dfmanager$Overall_work_years <- factor(dfmanager$Overall_work_years, 
                                           levels = c("1 year or less", "2 - 4 years", "5-7 years", "8 - 10 years", "11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more"), 
                        ordered = TRUE)

```

```{r}
# Eliminate rows where Field_work_years > Overall_work_years
nrow(dfmanager[dfmanager$Field_work_years > dfmanager$Overall_work_years,])

dfmanager <- dfmanager[dfmanager$Field_work_years <= dfmanager$Overall_work_years,]

nrow(dfmanager)
```

```{r}
unique(dfmanager$Age)
```


```{r}
# Eliminate impossible age and field_work_years
# We use the maximum age of each category
# It's not likely to start working at an age under 16
dfmanager <- dfmanager[!(dfmanager$Age == "18-24" & dfmanager$Field_work_years %in% c("8 - 10 years", "11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more")), ]

dfmanager <- dfmanager[!(dfmanager$Age == "25-34" & dfmanager$Field_work_years %in% c("11 - 20 years", "21 - 30 years", "31 - 40 years", "41 years or more")), ]

dfmanager <- dfmanager[!(dfmanager$Age == "35-44" & dfmanager$Field_work_years %in% c("21 - 30 years", "31 - 40 years", "41 years or more")), ]

dfmanager <- dfmanager[!(dfmanager$Age == "45-54" & dfmanager$Field_work_years %in% c("31 - 40 years", "41 years or more")), ]

dfmanager <- dfmanager[!(dfmanager$Age == "55-64" & dfmanager$Field_work_years %in% c("41 years or more")), ]
```

```{r}
# Report final observations
nrow(dfmanager)
```

### 2.e
```{r}
# Get a summary of salary
summary(dfmanager$Salary)
```
```{r}
# It is reasonable to remove the outlier
q1 = 56200
q3 = 112000
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr


dfmanager <- dfmanager[(dfmanager$Salary >= lower_bound) & (dfmanager$Salary <= upper_bound),]
nrow(dfmanager)
```
Thresholds were chosen by analyzing the distribution of the data. Outlier were removed, and others were kept, which will help us to dig into data statistically. 


## Problem 3
### 3.a
```{r}
#' Check if a given positive integer is a palindrome
#' @param x a positive integer
#' @return A list with two elements: isPalindromic: A logical value indicating if the input is palindromic. reversed: The input with its digits reversed.

isPalindromic <- function(x){
  # Check input
  if (!is.numeric(x) | x <= 0 | x != as.integer(x)){
    warning("x must be a positive integer")
  }
  
  # Convert
  x_char <- as.character(x)
  x_splited <- strsplit(x_char, NULL)[[1]]
  x_reversed <- rev(x_splited)
  x_new <- paste(x_reversed, collapse = "")
  
  # Create return list
  return_list <- list(isPalindromic = (x == as.integer(x_new)), reversed = as.integer(x_new))
  
  return(return_list)
}
```

### 3.b
```{r}
#' Find the next palindromic number strictly greater than the input
#' @param x a positive integer
#' @return A vector of length 1 with the next palindromic number greater than the input
nextPalindrome <- function(x){
  # Check input
  if (!is.numeric(x) | x <= 0 | x != as.integer(x)){
    warning("x must be a positive integer")
  }
  
  # Find the next Palindrome
  x = as.integer(x) + 1
  while (isPalindromic(x)$isPalindromic == FALSE){
    x = x + 1
  }
  
  # Return the next Palindrome
  return(x)
}
```

### 3.c

```{r}
# 391
nextPalindrome(391)

# 9928
nextPalindrome(9928)

# 19272719
nextPalindrome(19272719)

# 109
nextPalindrome(109)

# 2
nextPalindrome(2)
```
