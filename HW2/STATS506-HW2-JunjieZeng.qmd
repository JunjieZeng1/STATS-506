---
title: "STATS506-HW2-JunjieZeng"
author: "JunjieZeng"
format: 
  html:
    embed-resources: true
editor: visual
---

# STATS506 Problem Set #2

## Repository

https://github.com/JunjieZeng1/STATS-506.git

## Problem 1 Dice Game

### a

Version 1

```{r}
#' Function to simulate dice game using a loop
#'
#' @param x a numeric number, the number of dice to roll
#' @return Total winnings
play_dice_loop <- function(x){
  net_win = 0

  for (i in 1:x){
    roll <- sample(c(1:6), size = 1)
    if (roll %in% c(3, 5)){
      net_win = net_win + 2 * roll - 2
    }
    else{
      net_win = net_win - 2
    }
  }
  return(net_win)
}
```

Version2

```{r}
#' Function to simulate dice game using built-in R vectorized functions
#'
#' @param x a numeric number, the number of dice to roll
#' @return Total winnings
play_dice_vec <- function(x){
  roll <- sample(c(1:6), x, replace = TRUE)
  games <- ifelse(roll %in% c(3, 5), roll * 2 - 2 , -2)
  net_win = sum(games)
  return(net_win)
}
```

Version3

```{r}
#' Function to simulate dice game using table()
#'
#' @param x a numeric number, the number of dice to roll
#' @return Total winnings
play_dice_tb <- function(x){
  net_win = 0
  roll <- sample(c(1:6), x, replace = TRUE)
  table_roll <- table(roll)
  if ("3" %in% names(table_roll)){
    num_3 = as.integer(table_roll["3"])
    net_win = net_win +  2 * 3 * num_3
  }
  
  if ("5" %in% names(table_roll)){
    num_5 = as.integer(table_roll["5"])
    net_win = net_win +  2 * 5 * num_5
  }
  
  net_win = net_win - 2 * x
  
  return(net_win)
}
```

Version4

```{r}
#' Function to simulate dice game using apply
#'
#' @param x a numeric number, the number of dice to roll
#' @return Total winnings

play_dice_apply <- function(x){
  roll <- sample(c(1:6), x, replace = TRUE)
  games <- sapply(roll, function(x){
    if (x %in% c(3, 5)){
      num = x * 2 - 2
      return(num)
    }
    else{
      return(-2)
    }
  })
  return(sum(games))
}
```

### b

```{r}
for (i in c(3, 3000)){
  print(paste('Using loop with', i, 'rolls:', play_dice_loop(i)))
  print(paste('Using vectorized function with', i, 'rolls:', play_dice_vec(i)))
  print(paste('Using table with', i, 'rolls:', play_dice_tb(i)))
  print(paste('Using sapply with', i, 'rolls:', play_dice_apply(i)))
}
```

### c

```{r}
for (i in c(3, 3000)){
  set.seed(506)
  print(paste('Using loop with', i, 'rolls:', play_dice_loop(i)))
  set.seed(506)
  print(paste('Using vectorized function with', i, 'rolls:', play_dice_vec(i)))
  set.seed(506)
  print(paste('Using table with', i, 'rolls:', play_dice_tb(i)))
  set.seed(506)
  print(paste('Using sapply with', i, 'rolls:', play_dice_apply(i)))
}
```

We see that all the four versions give the same result for a given number of rolls. So those four versions are the same.

### d
```{r}
library(microbenchmark)
```
```{r}
microbenchmark(play_dice_loop(1000), play_dice_vec(1000), play_dice_tb(1000), play_dice_apply(1000))
```
```{r}
microbenchmark(play_dice_loop(100000), play_dice_vec(100000), play_dice_tb(100000), play_dice_apply(100000))
```
The first table with input(1000) has unit in microseconds.The second table with input(100000) has unit in milliseconds. 
In both tables, we see the speed rank as follows: play_dice_tb > play_dice_vec >> play_dice_apply >> play_dice_loop. This is especially significant when input is large. 

### e
```{r}
set.seed(506)
play_dice_tb(100000)
```
Based on a Monte Carlo simulation with 100000 runs, the final net gain is 67796, suggesting this is a unfair game. 

## Problem 2 Linear Regression
### a
```{r}
# Load data
data <- read.csv("/Users/junjiezeng/Desktop/git/STATS506/HW2/cars.csv")
```
```{r}
# Change column names
colnames(data) <- c("Dim:Height", 
                    "Dim:Length",
                    "Dim:Width",
                    "EI:Driveline",
                    "EI:Engine_type",
                    "EI:Hybrid",
                    "EI:Num_f_gears",
                    "EI:Transmission",
                    "FI:City_mpg",
                    "FI:Fuel_type",
                    "FI:Highway_mpg",
                    "ID:Class",
                    "ID:ID",
                    "ID:Make",
                    "ID:Model_year",
                    "ID:Year",
                    "EI:ES_horsepower",
                    "EI:ES_torque")
```

### b
```{r}
# Restrict the data to cars whose Fuel Type is “Gasoline”
data1 <- data[data$`FI:Fuel_type` == 'Gasoline', ]
```

### c
```{r}
# Create a boxplot
boxplot(data1$`FI:Highway_mpg`)

# Remove the largest outlier to show the grpah
hist(data1$`FI:Highway_mpg`[data1$`FI:Highway_mpg` < 200])
```
We see the graph is right skewed, so we better do a log-transformation on our data.     

```{r}
# Create a new variable with log-transformation on highway mpg
data1['log_highway_mpg'] <- log(data1$`FI:Highway_mpg`)
```
```{r}
# Look at the distribution of log highway mpg
hist(data1$log_highway_mpg, nclass = 30)
```
We see it looks more symmetrical except the large ourlier at 5.5.    

### d
```{r}
# Linear regression model
lm1 <- lm(log_highway_mpg ~ `EI:ES_torque` + as.factor(`ID:Year`) + `EI:ES_horsepower` + `Dim:Height` + `Dim:Length` + `Dim:Width`,data = data1)

# Summary of the model
summary(lm1)
```
The regression estimate a negative relationship between highway MPG and torque. The slope for torque is -0.00229, the baseline is the car released in 2009, suggesting that holding all else constant, one unit increase in torque is associated with approximately -0.00229 units decrease in log highway MPG.    

### e
```{r}
# Refit with interaction terms
lm2 <- lm(log_highway_mpg ~ `EI:ES_torque`*`EI:ES_horsepower`+ as.factor(`ID:Year`)  + `Dim:Height` + `Dim:Length` + `Dim:Width`,data = data1)

# Summary of the model
summary(lm2)
```
```{r}
library(interactions)
```

```{r}
# Plot interaction
interact_plot(lm2, pred = `EI:ES_torque`, modx = `EI:ES_horsepower`, 
  modx.values = c(100, 250, 400),  
  at = list(`ID:Year` = 2010),  
  x.label = "Torque",
  y.label = "log Highway MPG",
  legend.main = "Horsepower",
  data = data1
)
```
From the interaction plot, we see a negative relationship between torque and log highway MPG. Also, Higher horsepower has higher log highway MPG compared to those with lower horsepower. In addition, log highway MPG drops more steeply as torque increases for lower horsepower. 

### f
```{r}
# Create dummy variable year
library(dplyr)

data <- data1 %>%
  mutate(
    y2010 = ifelse(`ID:Year`== 2010, 1, 0),
    y2011 = ifelse(`ID:Year` == 2011, 1, 0),
    y2012 = ifelse(`ID:Year` == 2012, 1, 0)
  )

```
```{r}
#Construct X and Y
X <- cbind(1, data1$`EI:ES_torque`, 
           data$y2010,
           data$y2011,
           data$y2012,
           data1$`EI:ES_horsepower`, 
           data1$`Dim:Height`, 
           data1$`Dim:Length`, 
           data1$`Dim:Width`
           )

Y <- data1$log_highway_mpg
```

```{r}
# Solve for beta_hat
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% Y
beta_hat
```

We see the beta hat we get equal to what we get in part d. 















